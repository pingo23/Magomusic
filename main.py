import discord
from discord.ext import commands
import yt_dlp
import asyncio
import os
from dotenv import load_dotenv
import wavelink

# Carregar vari√°veis do .env
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
LAVALINK_HOST = os.getenv("LAVALINK_HOST", "localhost")
LAVALINK_PORT = os.getenv("LAVALINK_PORT", 2333)
LAVALINK_PASSWORD = os.getenv("LAVALINK_PASSWORD", "youshallnotpass")

if not TOKEN:
    raise ValueError("Token do Discord n√£o encontrado! Verifique seu arquivo .env.")

# Configura√ß√£o do bot
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents, reconnect=True)

# Vari√°veis globais
music_queue = []
is_playing = False

# Fun√ß√£o para conectar ao Lavalink
async def connect_to_lavalink(ctx):
    node = await wavelink.NodePool.create_node(
        bot=bot,
        host=LAVALINK_HOST,
        port=LAVALINK_PORT,
        password=LAVALINK_PASSWORD,
        identifier="default",
        region="us_central"
    )
    await node.connect(ctx.guild.id)

# Fun√ß√£o para obter URL do √°udio sem download
def get_audio_stream(query):
    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'default_search': 'ytsearch',
        'quiet': True,
        'timeout': 20
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=False)
            if 'entries' in info:
                info = info['entries'][0]
            return info['url'], info['title']
    except Exception as e:
        print(f"Erro ao obter √°udio: {e}")
        return None, None

# Garante que o bot esteja no canal correto
async def ensure_voice(ctx):
    if not ctx.author.voice:
        await ctx.send("‚ùå Voc√™ precisa estar em um canal de voz para tocar m√∫sicas!")
        return

    voice_channel = ctx.author.voice.channel

    if ctx.voice_client:  # Se o bot j√° est√° conectado a um canal
        if ctx.voice_client.channel != voice_channel:
            await ctx.voice_client.move_to(voice_channel)
    else:
        try:
            await voice_channel.connect()
        except discord.errors.ClientException as e:
            await ctx.send(f"‚ùå Erro ao conectar no canal: {e}")

# Fun√ß√£o para tocar m√∫sica com Lavalink
async def play_music(ctx):
    global is_playing

    if not ctx.voice_client:
        await ctx.send("‚ùå N√£o estou conectado a um canal de voz!")
        is_playing = False
        return

    if not music_queue:
        is_playing = False
        return

    url, title = music_queue.pop(0)

    try:
        # Usando o Lavalink para tocar a m√∫sica
        player = ctx.voice_client
        track = await wavelink.YouTubeTrack.search(query=url)
        await player.play(track[0])

        is_playing = True
        await ctx.send(f"üé∂ Tocando agora: **{title}**")
    except Exception as e:
        await ctx.send("‚ùå Erro ao tentar tocar a m√∫sica.")
        print(f"Erro ao tocar m√∫sica: {e}")
        is_playing = False

# Fun√ß√£o para verificar a fila
async def check_queue(ctx):
    global is_playing
    if music_queue:
        await play_music(ctx)
    else:
        is_playing = False
        await ctx.send("üéµ Fila vazia! Aguardando novas m√∫sicas.")

# Comando para tocar m√∫sica
@bot.command()
async def play(ctx, *, query):
    global is_playing

    if not ctx.author.voice:
        await ctx.send("‚ùå Voc√™ precisa estar em um canal de voz!")
        return

    await ensure_voice(ctx)

    await ctx.send("üîé Buscando m√∫sica...")

    url, title = get_audio_stream(query)

    if not url:
        await ctx.send("‚ùå Erro ao buscar a m√∫sica! Tente novamente.")
        return

    music_queue.append((url, title))

    if not is_playing:
        await play_music(ctx)
    else:
        await ctx.send(f"üìå **{title}** foi adicionada √† fila!")

# Comando para mostrar a fila de m√∫sicas
@bot.command()
async def queue(ctx):
    if music_queue:
        queue_list = "\n".join(f"{i+1}. {song[1]}" for i, song in enumerate(music_queue))
        await ctx.send(f"üìú **Fila de m√∫sicas:**\n{queue_list}")
    else:
        await ctx.send("üì≠ A fila est√° vazia!")

# Comando para pular a m√∫sica atual
@bot.command()
async def skip(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
        await ctx.send("‚è≠Ô∏è M√∫sica pulada!")
        await check_queue(ctx)
    else:
        await ctx.send("‚ùå Nenhuma m√∫sica est√° tocando no momento.")

# Comando para pausar a m√∫sica
@bot.command()
async def pause(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.pause()
        await ctx.send("‚è∏Ô∏è M√∫sica pausada!")
    else:
        await ctx.send("‚ùå Nenhuma m√∫sica est√° tocando para ser pausada.")

# Comando para resumir a m√∫sica pausada
@bot.command()
async def resume(ctx):
    if ctx.voice_client and ctx.voice_client.is_paused():
        ctx.voice_client.resume()
        await ctx.send("‚ñ∂Ô∏è M√∫sica retomada!")
    else:
        await ctx.send("‚ùå N√£o h√° m√∫sica pausada para retomar.")

# Comando para limpar a fila
@bot.command()
async def clear_queue(ctx):
    global music_queue
    music_queue.clear()
    await ctx.send("üóëÔ∏è Fila de m√∫sicas limpa!")

# Comando para desconectar do canal de voz
@bot.command()
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("üëã Desconectado do canal de voz.")
    else:
        await ctx.send("‚ùå N√£o estou em um canal de voz!")

@bot.event
async def on_ready():
    print(f'‚úÖ {bot.user} est√° online e pronto para tocar m√∫sica!')

bot.run(TOKEN)
